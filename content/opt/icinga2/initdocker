#!/bin/bash

#/******************************************************************************
# * docker-icinga2                                                             *
# * Dockerfile for Icinga 2 and Icinga Web 2                                   *
# * Copyright (C) 2015 Icinga Development Team (http://www.icinga.org)         *
# *                                                                            *
# * This program is free software; you can redistribute it and/or              *
# * modify it under the terms of the GNU General Public License                *
# * as published by the Free Software Foundation; either version 2             *
# * of the License, or (at your option) any later version.                     *
# *                                                                            *
# * This program is distributed in the hope that it will be useful,            *
# * but WITHOUT ANY WARRANTY; without even the implied warranty of             *
# * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the              *
# * GNU General Public License for more details.                               *
# *                                                                            *
# * You should have received a copy of the GNU General Public License          *
# * along with this program; if not, write to the Free Software Foundation     *
# * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301, USA.             *
# ******************************************************************************/

set -e

function echo_log {
	DATE='date +%Y/%m/%d:%H:%M:%S'
	echo `$DATE`" $1"
}

initfile=/opt/icinga2/init.done

echo_log "Validating the icinga2 configuration first."
if ! icinga2 daemon -C; then
	echo_log "Icinga 2 config validation failed. Stopping the container."
	exit 1
fi

PGUSER=postgres
PGENGINE=/usr/bin
PGHOME=/var/lib/pgsql
PGLOG=${PGHOME}/pglog.log
PGDATA=${PGHOME}/data
PGHBA=$PGDATA/pg_hba.conf
PGPORT=5432

if [ ! -f "${initfile}" ]; then

        # Change ownership of main directory
        touch $PGLOG
        chown -R $PGUSER:$PGUSER $PGHOME

        # Initialize the database
        echo_log "Initialising the Postgres Database"
        initdbcmd="$PGENGINE/initdb --locale=$LANG --pgdata='$PGDATA' --auth='ident'"
        su -l $PGUSER -c "$initdbcmd" >> "$PGLOG" 2>&1 < /dev/null

        # Start / Stop Commands 
        startdbcmd="$PGENGINE/pg_ctl -D $PGDATA -l $PGLOG start"
        stopdbcmd="$PGENGINE/pg_ctl -D $PGDATA stop"

        # Start the database
        echo_log "Staring the Postgres Database"
        su -l $PGUSER -c "$startdbcmd" >> "$PGLOG" 2>&1
        sleep 10s

        echo_log "Setting up icinga database"

        # Create the icinga database
        sudo -u $PGUSER psql -c "CREATE ROLE icinga WITH LOGIN PASSWORD 'icinga'" >> "$PGLOG" 2>&1
        sudo -u $PGUSER createdb -O icinga -E UTF8 icinga >> "$PGLOG" 2>&1

        # Setup access icinga 
        echo "# default" > $PGHBA
        echo "local   all      postgres                            peer" >> $PGHBA
        echo "host    all      postgres      127.0.0.1/32          ident" >> $PGHBA
        echo "host    all      postgres      ::1/128               ident" >> $PGHBA 

        # Setup access icinga 
        echo "# icinga" >> $PGHBA
        echo "local   icinga      icinga                            md5" >> $PGHBA
        echo "host    icinga      icinga      127.0.0.1/32          md5" >> $PGHBA
        echo "host    icinga      icinga      ::1/128               md5" >> $PGHBA 

        echo_log "Setting up icingaweb2 database"

        # Create the icingaweb2 database
        sudo -u $PGUSER psql -c "CREATE ROLE icingaweb2 WITH LOGIN PASSWORD 'icingaweb2'" >> "$PGLOG" 2>&1
        sudo -u $PGUSER createdb -O icingaweb2 -E UTF8 icingaweb2 >> "$PGLOG" 2>&1

        # Setup access icingaweb2 and restart 
        echo "# icingaweb2" >> $PGHBA
        echo "local   icingaweb2      icingaweb2                            md5" >> $PGHBA
        echo "host    icingaweb2      icingaweb2      127.0.0.1/32          md5" >> $PGHBA
        echo "host    icingaweb2      icingaweb2      ::1/128               md5" >> $PGHBA 
        
        # Restart
        echo_log "Restarting Postgres"
        su -l $PGUSER -c "$stopdbcmd" >> "$PGLOG" 2>&1
        su -l $PGUSER -c "$startdbcmd" >> "$PGLOG" 2>&1
        sleep 10s
        
        # Setup the schemas
        echo_log "Importing the icinga schema"
        schemacmd1="PGPASSWORD=icinga psql -U icinga -d icinga < /usr/share/icinga2-ido-pgsql/schema/pgsql.sql" 
        su -l $PGUSER  -c "$schemacmd1"  >> "$PGLOG" 2>&1

        echo_log "Importing the icingaweb2 schema"
        schemacmd2="PGPASSWORD=icingaweb2 psql -U icingaweb2 -d icingaweb2 </usr/share/doc/icingaweb2/schema/pgsql.schema.sql" 
        su -l $PGUSER  -c "$schemacmd2"  >> "$PGLOG" 2>&1

        echo_log "Adding default user for web"
        PW='\$1\$1AvZsnnH\$4xl9N2vQ.3.A0fOJRk8Jo.'
        insertusercmd="PGPASSWORD=icingaweb2 psql -U icingaweb2 -d icingaweb2 -c \"INSERT INTO icingaweb_user (name, active, password_hash) VALUES ('icingaadmin', 1, '$PW');\""
        su -l $PGUSER -c "$insertusercmd"  >> "$PGLOG" 2>&1  

        sleep 1s

        echo_log "Enabling icinga2 features."
        # enable icinga2 features if not already there
        icinga2 feature enable ido-pgsql command

        echo_log "Enabling icingaweb2 modules."
        if [[ -L /etc/icingaweb2/enabledModules/monitoring ]]; then echo "Symlink for /etc/icingaweb2/enabledModules/monitoring exists already...skipping"; else ln -s /usr/share/icingaweb2/modules/monitoring /etc/icingaweb2/enabledModules/monitoring; fi
        if [[ -L /etc/icingaweb2/enabledModules/doc ]]; then echo "Symlink for /etc/icingaweb2/enabledModules/doc exists already...skipping"; else ln -s /usr/share/icingaweb2/modules/doc /etc/icingaweb2/enabledModules/doc; fi

        touch ${initfile}
fi

if [[ -n $ICINGA2_FEATURE_GRAPHITE ]]; then
  echo_log "Enabling Icinga 2 Graphite feature."
  icinga2 feature enable graphite

cat <<EOF >/etc/icinga2/features-enabled/graphite.conf
/**
 * The GraphiteWriter type writes check result metrics and
 * performance data to a graphite tcp socket.
 */

library "perfdata"

object GraphiteWriter "graphite" {
  host = "$ICINGA2_FEATURE_GRAPHITE_HOST"
  port = "$ICINGA2_FEATURE_GRAPHITE_PORT"
}
EOF

fi

# Create /var/log/httpd if !exists
if [ ! -d /var/log/httpd ];  then
	mkdir -p /var/log/httpd
fi

echo_log "Starting Supervisor. CTRL-C will stop the container."
/usr/bin/supervisord -c /etc/supervisord.conf >> /dev/null
